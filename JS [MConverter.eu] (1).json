const CACHE_NAME = "notes-app-v1";
const ASSETS_TO_CACHE = [
  "/", // Cache the root page
  "/notesp.html",
  "/update.html",
  "/customnotesp.html",
  "/notespbg.jpg",
  "/circle.jpg",
  "/cross.jpg",
  "/waves.jpg",
  "/square.jpg",
  "/star.jpg",
  "/cock.jpg",
  "/boat.jpg",
  "/house.jpg",
  "/bike.jpg",
  "/sun.jpg",
  "/scribble.jpg",
  "/no.jpg",
  "/qh.jpg",
  "/as.jpg",
  "/7d.jpg",
  "/car.jpg",
  "/cat.jpg",
  "/tree.jpg",
  "/Couch.PNG",
  "/stick.jpg",
  "/face.jpg",
  "/heart.jpg",
  "/flower.jpg",
  "/rain.jpg",
  "/wine.jpg",
  "/table.jpg",
  "/fish.jpg",
  "/pencil.jpg",
  "/moon.jpg",
  "/art.jpg",
  "/rocket.jpg",
  "/fu.jpg",
  "/dog.jpg",
  "/plane.jpg",
  "/airborne.jpg",
  "/YTS.png.PNG",
  "/ufo.jpg",
  "/ghost.jpg",
  "/skull.jpg",
  "/bolt.jpg",
  "/phone.jpg",
  "/book.jpg",
  "/tv.jpg",
  "/clock.jpg",
  "/key.jpg",
  "/house2.jpg",
  "/car2.jpg",
  "/train2.jpg",
  "/plane2.jpg",
  "/tv2.jpg",
  "/book2.jpg",
  "/gun2.jpg",
  "/tree2.jpg",
  "/sun2.jpg",
  "/moon2.jpg",
  "/dog2.jpg",
  "/cat2.jpg",
  "/bird2.jpg",
  "/ghost2.jpg",
  "/skull2.jpg",
  "/darren.mov",
  "/customnotespmanifest.json",
  "/notespmanifest.json",
"/freewill.html",
"/inscriptus.json",
"/inscriptus.PNG",
"/at.html",
"/at.json",
"/atbg2.png",
"/update.json",
"/header-dark.jpg",
"/header-light.jpg",
"/footer-dark.jpg",
"/footer-light.jpg",
"/android-header.jpg",
"/android-header-light.jpg",
"/android-footer.jpg",
"/androidicon.jpg",
"/android.json",
"/androidnotes.html",
"/flush.html",
"/flush.json",
"/aos.jpg",
"/kos.jpg",
"/qos.jpg",
"/tos.jpg",
"/jos.jpg",
"/edc.html",
"/edc.json",


];

// Install the service worker and cache assets
self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(ASSETS_TO_CACHE);
    })
  );
  self.skipWaiting();
});

// Activate the service worker and remove old caches if necessary
self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== CACHE_NAME) {
            return caches.delete(cache);
          }
        })
      );
    })
  );
  self.clients.claim();
});

// Fetch handler: Serve cached assets if available, else fetch from network
self.addEventListener("fetch", (event) => {
  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      return cachedResponse || fetch(event.request);
    })
  );
});
